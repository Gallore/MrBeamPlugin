<script id='doFindMrBeamReload' lang="javascript">

    doFindMrBeamReload();

    /**
     * This code is only executed if window.location.hostname is whitelisted.
     * Then we test all forward_hosts and forward to the one which responds first.
     *
     * Per iptables we redirect all incoming traffic (on port 80) to localhost.
     * No matter what website the user is trying to open, he'll get the MrBeam UI
     * as response. This is very useful for find.mr-beam.org. However, it can cause
     * serious caching issues. (MrBeam UI is cached as example.com. Even a simple reload
     * wouldn't solve this for the user.) That's why we do a force-reload whenever
     * we find our selfs on one of the whitelisted domains.
     */
    function doFindMrBeamReload() {

        // Lists of hostnames where forwarding is activated.
        var hostname_whitelist = ["find.mr-beam.org", "my.mr-beam.org"]

        // List of hostnames to test; url param is optional
        var forward_hosts = [
                {host: "find.mr-beam.org",
                 url: "http://find.mr-beam.org/img/ANDYTESTGIF.gif?_="+Date.now()},
                {host: "MrBeam-B5CC.local"},
                {host: "MrBeam-B5CC"},
                {host: "10.250.250.1"}
                ]

        // timeout for each test request. requests are done in parallel
        var urlCheckTimeout = 8000;

        if (is_whitelisted(window.location.hostname)) {
            console.log("doFindMrBeamReload() Testing hosts...");
            var start_ts = Date.now();
            test_hosts(forward_hosts, urlCheckTimeout)
                .then(
                    function(result){
                        console.log("doFindMrBeamReload() Forwarding from "+window.location.hostname+" to: "+result + " ("+ (Date.now()-start_ts+0) +"ms)");
                        window.location.href = "http://" + result + "?_="+Date.now();
                    },
                    function(err){
                        console.log("doFindMrBeamReload() No host answered. Not forwarding. ("+ (Date.now()-start_ts+0) +"ms)");
                    });
        }

        function is_whitelisted(hostname) {
            for (var i=0; i<hostname_whitelist.length; i++) {
                if (hostname == hostname_whitelist[i]){
                    return true;
                }
            }
            return false;
        };

        function test_hosts(hostsToTest, urlCheckTimeout){
            return new Promise(function (resolve, reject) {
                var tests = []
                var pending = true;

                // add the given hosts to tests
                for (var i=0; i<hostsToTest.length; i++) {
                    var my_test = hostsToTest[i]
                    if (!my_test.url) {
                        my_test.url = "http://"+my_test.host+":80/plugin/findmymrbeam/ANDYTESTGIF.gif?_="+Date.now()
                    }
                    my_test.pending = true,
                    my_test.success = null,
                    my_test.error = null
                    tests.push(my_test)
                }

                // start the actual tests with all contestants
                for (var i=0; i<tests.length; i++) {
                    _ping(tests[i], urlCheckTimeout)
                        .then(
                            function(result){
                                if (pending) {
                                    pending = false;
                                    result.pending = false;
                                    resolve(result.host);
                                }
                            },
                            function(error){
                                error.pending = false;
                            })
                        .then(
                            function(err){
                                var done = true;
                                for (var i=0; i<tests.length; i++) {
                                    if (tests[i].pending) {
                                        done = false;
                                        break;
                                    }
                                }
                                if (done) {
                                    pending = false;
                                    reject();
                                }
                            }
                        )
                };

            });
        };

        function _ping(my_test, timeout) {
            return new Promise(function (resolve, reject) {

                var img = new Image();
                var pending = true;
                img.onload = function() {
                    pending = false;
                    my_test.pending = false;
                    my_test.success = true;
                    resolve(my_test);
                };
                img.onerror = function() {
                    pending = false;
                    my_test.pending = false;
                    my_test.success = false;
                    my_test.error = "error";
                    reject(my_test);
                };
                img.src = my_test.url;

                setTimeout(function() {
                    if (pending) {
                        my_test.pending = false;
                        my_test.success = false;
                        my_test.error = "timeout";
                        reject(my_test);
                    }
                }, timeout);

            });
        };

    };
</script>
